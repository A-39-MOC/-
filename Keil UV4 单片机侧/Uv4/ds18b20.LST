C51 COMPILER V9.56.0.0   DS18B20                                                           12/16/2024 19:35:40 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE DS18B20
OBJECT MODULE PLACED IN ds18b20.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ds18b20.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <reg52.h>
   2          #include "ds18b20.h"
   3          #include "delay.h"
   4          
   5          /*******************************************************************************
   6          * 函 数 名         : ds18b20_init
   7          * 函数功能       : 18B20初始化
   8          * 输    入         : void
   9          * 输    出         : bit
  10          *******************************************************************************/
  11          bit ds18b20_init(void)
  12          {
  13   1        uchar idx;
  14   1        DQ = 0;       //将总线拉低480us~960us
  15   1        delay_us(255);    //延时515us
  16   1        DQ = 1;       //然后拉高总线，如果DS18B20做出反应会将在15us~60us后总线拉低
  17   1        idx = 0;
  18   1        while(DQ)     //等待DS18B20拉低总线
  19   1        {
  20   2          delay_us(5);  //延时15us
  21   2          if(++idx>=10) //等待>=150us
  22   2          {
  23   3            return 0; //初始化失败
  24   3          }
  25   2        }
  26   1        delay_us(50);   //延时105us，注意：protues仿真无法读到数据极有可能是该延时问题，适当放大该延时时间
  27   1        return 1;     //初始化成功
  28   1      }
  29          
  30          /*******************************************************************************
  31          * 函 数 名         : ds18b20_wr_byte
  32          * 函数功能       : 写入一个字节
  33          * 输    入         : uchar dat
  34          * 输    出         : void
  35          *******************************************************************************/
  36          void ds18b20_wr_byte(uchar dat)
  37          {
  38   1        uchar idx;
  39   1        for(idx=0; idx<8; idx++)
  40   1        {
  41   2          DQ = 0;       //每写入一位数据之前先把总线拉低1us
  42   2          DQ = dat&0x01;  //然后写入一个数据，从最低位开始
  43   2          delay_us(29); //延时63us
  44   2          DQ = 1;     //然后释放总线，至少1us给总线恢复时间才能接着写入第二个数值
  45   2          dat >>= 1;
  46   2        }
  47   1      }
  48          
  49          /*******************************************************************************
  50          * 函 数 名         : ds18b20_re_byte
  51          * 函数功能       : 读取一个字节
  52          * 输    入         : void
  53          * 输    出         : uchar
  54          *******************************************************************************/
  55          uchar ds18b20_re_byte(void)
C51 COMPILER V9.56.0.0   DS18B20                                                           12/16/2024 19:35:40 PAGE 2   

  56          {
  57   1        uchar idx;
  58   1        uchar byte;
  59   1        for(idx=8;idx>0;idx--)
  60   1        {
  61   2          DQ = 0;     //先将总线拉低1us
  62   2          byte >>= 1;
  63   2          DQ = 1;     //然后释放总线
  64   2          delay_us(4);  //延时13us
  65   2          if(DQ)
  66   2          {
  67   3            byte |= 0x80;
  68   3          }
  69   2          delay_us(24); //延时53us
  70   2        }
  71   1        return byte;
  72   1      }
  73          
  74          /*******************************************************************************
  75          * 函 数 名         : ds18b20_temp_conver
  76          * 函数功能       : 温度转换命令
  77          * 输    入         : void
  78          * 输    出         : void
  79          *******************************************************************************/
  80          void ds18b20_temp_conver(void)
  81          {
  82   1        if(ds18b20_init())
  83   1        {
  84   2          ds18b20_wr_byte(0xcc);  //跳过ROM操作命令    
  85   2          ds18b20_wr_byte(0x44);  //温度转换命令
  86   2        }
  87   1      }
  88          
  89          /*******************************************************************************
  90          * 函 数 名         : ds18b20_temp_read
  91          * 函数功能         : 温度读取命令
  92          * 输    入         : void
  93          * 输    出         : void
  94          *******************************************************************************/
  95          void ds18b20_temp_read(void)
  96          {
  97   1        if(ds18b20_init())
  98   1        {
  99   2          ds18b20_wr_byte(0xcc);  //跳过ROM操作命令    
 100   2          ds18b20_wr_byte(0xbe);  //温度转换命令
 101   2        }
 102   1      }
 103          
 104          /*******************************************************************************
 105          * 函 数 名         : ds18b20_read_temp
 106          * 函数功能       : 读取温度
 107          * 输    入         : void
 108          * 输    出         : void
 109          *******************************************************************************/
 110          int ds18b20_read_temp(void)
 111          {
 112   1        int temp;
 113   1        uchar tmh,tml;
 114   1        ds18b20_temp_read();
 115   1        tml = ds18b20_re_byte();    //读取温度值共16位，先读低字节
 116   1        tmh = ds18b20_re_byte();    //再读高字节
 117   1        temp = tmh;
C51 COMPILER V9.56.0.0   DS18B20                                                           12/16/2024 19:35:40 PAGE 3   

 118   1        temp <<= 8;
 119   1        temp |= tml;
 120   1        return (int)(temp*0.625);
 121   1      }
 122          
 123          /*******************************************************************************
 124          * 函 数 名         : ds18b20_temp_change
 125          * 函数功能       : 负温度数据转换
 126          * 输    入         : int* tm
 127          * 输    出         : void
 128          *******************************************************************************/
 129          void ds18b20_temp_change(int* tm)
 130          {
 131   1        if(*tm < 0)       //当温度值为负数
 132   1        {
 133   2          *tm = *tm-1;    //把获得的数据（补码）减一取反求出原码
 134   2          *tm = ~(*tm);
 135   2        }
 136   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    216    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
